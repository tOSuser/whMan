#: Bahs helper functions
#:
#: File : helper.shinc
#
#
# Nexttop 2023-2025 (nexttop.se)
# Maintenance nexttop -> hossein a.t. (osxx.com)
#-------------------------------------------------
#
# Local variables:
#  ORIGINALSCRIPT_PATH
#  SCRIPT_PATH
#  verboseRunStr
#
#-------------------------------------------------
BGRED=''
RED=''
GREEN=''
YELLOW=''
BLUE=''
CYAN=''
BGGREEN=''
WHITE=''
NC='' # No Color

if [ ! -z ${colormode+x} ] && [ $colormode -eq 0 ]; then
    BGRED='\033[41m'
    RED='\033[31m'
    GREEN='\033[32m'
    YELLOW='\033[33m'
    BGYELLOW='\033[43m'
    BLUE='\033[34m'
    BGBLUE='\033[44m'
    CYAN='\033[35m'
    BGGREEN='\033[42m'
    WHITE='\033[37m\033[1m'
    NC='\033[0m' # No Color
fi

#*
#*  @description    check an argumants' array for an argumant
#*
#*  @param          inParamArray
#*  @param          argToCheck
#*
#*  @return         0 if Found, > 0 if it was not found
#*
function lookForArgument () #@ USAGE lookForArgument argToCheck param1 param2 ...
{
    argToCheck=$1
    inParamArray=($@)
    inParamArray=("${inParamArray[@]:1}")
    inParamTotalElements=${#inParamArray[@]}

    currentElement=0
    for inparam in "${inParamArray[@]}"
    do
        if [ "$inparam" = $argToCheck ]; then
            # The argument was found
            # Return next element if there is more elements
            [ $(( inParamTotalElements - 1 )) -gt $currentElement ] &&
                nextElementId=$(( currentElement + 1 )) &&
                echo "${inParamArray[currentElement + 1]}"
            return 0
        fi
        currentElement=$(( currentElement + 1 ))
    done

    # Not found
    return 1
}

function verbosetracer () #@ USAGE verbosetracer verboseFlag traceString
{
    verboseFlag=$1
    traceString=$2

    [ $verboseFlag -ne 0 ] &&
        return 0

    echo -e "${CYAN}$traceString${NC}"
    return 0
}

function column_ansi () #@ USAGE column_ansi parameters
{
    while read -r data; do
        echo " $data"
    done
    return 0
}

function putToFile () #@ USAGE putToFile filePath data
{
    if [ -t 0 ]; then
        filePath=$1
        data=$2
        echo -e "$data" >> "$filePath"
    else
        filePath=$1
        while read -r data; do
            echo -e "$data" >> "$filePath"
        done
    fi
    return 0
}

function getFromFile () #@ USAGE getFromFile filePath
{
    if [ -t 0 ]; then
        filePath=$1
        [ -f $filePath ] &&
            fileContent=$(<"$filePath") &&
            echo "$fileContent" &&
            return 0
    else
        while read -r data; do
            echo "$data"
        done
        return 0
    fi
    return 1
}

function isFileExist () #@ USAGE isFileExist filePath
{
    filePath=$1

    [ -f $filePath ] &&
        return 0
    return 1
}

function isDirExist () #@ USAGE isDirExist dirPath
{
    dirPath=$1

    [ -d $dirPath ] &&
        return 0
    return 1
}
